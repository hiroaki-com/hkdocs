name: Deploy hkdocs to Cloud Run

on:
  push:
    branches:
      - main # Trigger on push to main branch

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_ARTIFACT_REGISTRY_REGION: "asia-northeast1"
  GCP_CLOUD_RUN_REGION: "asia-northeast1"
  AR_REPO_NAME: "hkdocs-images"               # Artifact Registry repository name
  IMAGE_BASE_NAME: "hkdocs-app"               # Docker image base name
  CR_SERVICE_NAME: "hkdocs-service"           # Cloud Run service name

jobs:
  build-and-deploy:
    name: Build, Push, and Deploy hkdocs
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'    # Required to checkout the repository
      id-token: 'write'   # Required for Workload Identity Federation

    steps:
      - name: Checkout hkdocs repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry (${{ env.GCP_ARTIFACT_REGISTRY_REGION }})
        run: gcloud auth configure-docker ${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev --quiet

      - name: Prepare image tag for hkdocs
        id: image_tag
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          FULL_IMAGE_TAG="${{ env.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.AR_REPO_NAME }}/${{ env.IMAGE_BASE_NAME }}:${SHORT_SHA}"
          echo "FULL_IMAGE_TAG=${FULL_IMAGE_TAG}" >> $GITHUB_ENV
          echo "Generated Image Tag: ${FULL_IMAGE_TAG}"

      # TODO : Add linting and testing steps here in the future
      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version-file: '.nvmrc' # Or specify e.g., node-version: '22' if .nvmrc is not used
      #     cache: 'pnpm' # Enable pnpm caching via setup-node
      #
      # - name: Setup pnpm (uses version from package.json "packageManager")
      #   uses: pnpm/action-setup@v4
      #   # version: 10.11 # Optionally override pnpm version, but usually not needed if "packageManager" is set
      #
      # - name: Install dependencies for lint/test
      #   run: pnpm install --frozen-lockfile
      #
      # - name: Run Linter for hkdocs
      #   run: pnpm run lint # Ensure "lint" script exists in package.json
      #
      # - name: Run Tests for hkdocs
      #   run: pnpm run test # Ensure "test" script exists in package.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image for hkdocs
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64 # Specify target platform
          push: true # Push the image to Artifact Registry
          tags: ${{ env.FULL_IMAGE_TAG }}
          labels: | # Add labels to the image
            app-name=${{ env.IMAGE_BASE_NAME }}
            commit-sha=${{ github.sha }}
          cache-from: type=gha # Enable cache from GitHub Actions cache
          cache-to: type=gha,mode=max # Enable cache to GitHub Actions cache

      - name: Deploy hkdocs to Cloud Run service (${{ env.CR_SERVICE_NAME }})
        run: |
          gcloud run deploy ${{ env.CR_SERVICE_NAME }} \
            --image=${{ env.FULL_IMAGE_TAG }} \
            --platform=managed \
            --region=${{ env.GCP_CLOUD_RUN_REGION }} \
            --port=8080 \
            --allow-unauthenticated \
            --quiet
            # Consider adding --cpu, --memory, --min-instances, --max-instances as needed.
            # Health checks from Dockerfile are typically auto-detected by Cloud Run.

          SERVICE_URL=$(gcloud run services describe ${{ env.CR_SERVICE_NAME }} --platform=managed --region="${{ env.GCP_CLOUD_RUN_REGION }}" --format='value(status.url)')
          echo "âœ… hkdocs service deployed successfully. URL: ${SERVICE_URL}"
